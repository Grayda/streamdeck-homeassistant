const colors = {
    action: "#FFFFFF",
    passive: "#bbbbbb",
    active: "#e9b200",
    bg: "#4E4E61",
    bgRed: "#700300",
    bgBlue: "#003d70"
};

export const IconFactory = {
    "switch": {
        default: (state) => {
            if (state === "on") {
                return Image["switchOn"]();
            } else {
                return Image["switchOff"]()
            }
        }
    },

    light: {
        default: (state) => {
            if (state === "on") {
                return Image["switchOn"]();
            } else {
                return Image["switchOff"]()
            }
        }
    },

    binary_sensor: {
        default: (state) => {
            if (state === "on") {
                return Image["sensorOn"]();
            } else {
                return Image["sensorOff"]()
            }
        },

        plug: (state) => {
            return Image["plug"](state);
        }
    },

    weather: {
        default: (state) => {
            return Image.weather(state)
        }
    },

    sensor: {
        battery: (state) => {
            return Image["battery"](state)
        },

        temperature: (state, attributes) => {
            return Image.temperature(state, attributes)
        },

        humidity: (state, attributes) => {
            return Image.humidity(state, attributes)
        },

        power: (state, attributes) => {
            return Image.power(state, attributes)
        },

        pressure: (state, attributes) => {
            return Image.pressure(state, attributes)
        },

        default: (state, attributes) => {
            return Image.defaultSensor(state, "", attributes["unit_of_measurement"])
        }
    }

}

const Image = {
    switchOn: () => {
        return `<svg width="144" height="144" viewBox="0 0 144 144" xmlns="http://www.w3.org/2000/svg"><path fill="${colors.active}"  d="m43.428 64.186h57.145c13.786 0 25.001-11.215 25.001-25.001 0-13.786-11.215-25.001-25.001-25.001h-57.145c-13.786 0-25.001 11.215-25.001 25.001 0 13.786 11.215 25.001 25.001 25.001zm57.145-42.859c9.8468 0 17.858 8.011 17.858 17.858 0 9.8468-8.011 17.858-17.858 17.858-9.8468 0-17.858-8.011-17.858-17.858 0-9.8468 8.011-17.858 17.858-17.858z" stroke-width="1.7858"/></svg>`
    },

    switchOff: () => {
        return `<svg width="144" height="144" viewBox="0 0 144 144" xmlns="http://www.w3.org/2000/svg"><g fill="${colors.action}" transform="matrix(1.7858 0 0 1.7858 -40.563 -86.408)"><path d="m47.033 60.33c-5.514 0-10 4.486-10 10s4.486 10 10 10 10-4.486 10-10-4.486-10-10-10zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z"/><path d="m79.033 56.33h-32c-7.72 0-14 6.28-14 14s6.28 14 14 14h32c7.72 0 14-6.28 14-14s-6.28-14-14-14zm0 26h-32c-6.617 0-12-5.383-12-12s5.383-12 12-12h32c6.617 0 12 5.383 12 12s-5.383 12-12 12z"/></g></svg>`
    },

    sensorOn: () => {
        return `<svg width="144" height="144" viewBox="0 0 144 144" xmlns="http://www.w3.org/2000/svg"><path fill="${colors.active}" d="m43.428 64.186h57.145c13.786 0 25.001-11.215 25.001-25.001s-11.215-25.001-25.001-25.001h-57.145c-13.786 0-25.001 11.215-25.001 25.001s11.215 25.001 25.001 25.001z" stroke-width="1.7858"/></svg>`
    },

    sensorOff: () => {
        return `<svg width="144" height="144" viewBox="0 0 144 144" xmlns="http://www.w3.org/2000/svg"><path fill="${colors.passive}" d="m100.57 14.186h-57.146c-13.786 0-25.001 11.215-25.001 25.001s11.215 25.001 25.001 25.001h57.146c13.786 0 25.001-11.215 25.001-25.001s-11.215-25.001-25.001-25.001zm0 46.431h-57.146c-11.817 0-21.43-9.613-21.43-21.43s9.613-21.43 21.43-21.43h57.146c11.817 0 21.43 9.613 21.43 21.43s-9.613 21.43-21.43 21.43z" stroke-width="1.7858"/></svg>`
    },

    plug: (state) => {
        let color;
        if (state === "on") {
            color = colors.active
        } else {
            color = colors.passive
        }
        return `<svg width="144" height="144" viewBox="0 0 144 144" xmlns="http://www.w3.org/2000/svg"><g fill="${color}" transform="matrix(.12332 .12932 -.12332 .12932 74.269 -34.817)" stroke-width="5.5994"><path d="m202.7 259.7-31.5 31.5c-5.6 5.6-8.6 13-8.6 20.9s3.1 15.3 8.6 20.9l6.1 6.1-3.7 3.7c-11.1 11.1-29.2 11.1-40.4 0l-31.4-31.4c-20.7-20.7-54.3-20.7-75 0s-20.7 54.3 0 75l31.4 31.5c5.4 5.4 8.4 12.6 8.4 20.2s-3 14.8-8.4 20.2c-4.8 4.8-4.8 12.5 0 17.3 2.4 2.4 5.5 3.6 8.7 3.6 3.1 0 6.3-1.2 8.7-3.6 10-10 15.5-23.3 15.5-37.5s-5.5-27.5-15.5-37.5l-31.4-31.5c-11.1-11.1-11.1-29.2 0-40.4s29.2-11.1 40.4 0l31.4 31.3c20.7 20.7 54.3 20.7 75 0l3.7-3.7 6.1 6.1c5.8 5.8 13.3 8.6 20.9 8.6s15.1-2.9 20.9-8.6l31.5-31.5c11.4 3.7 23.2 5.7 35 5.7 28.7 0 57.4-10.9 79.2-32.7l55.1-55.1 9.9 9.9c2.4 2.4 5.5 3.6 8.7 3.6s6.3-1.2 8.7-3.6c4.8-4.8 4.8-12.5 0-17.3l-40.5-40.5 67-67c4.8-4.8 4.8-12.5 0-17.3s-12.5-4.8-17.3 0l-67 67-62.7-62.6 67-67c4.8-4.8 4.8-12.5 0-17.3s-12.5-4.8-17.3 0l-67 67-40.5-40.5c-4.8-4.8-12.5-4.8-17.3 0s-4.8 12.5 0 17.3l9.9 9.9-55.1 55.1c-30.9 30.9-39.9 75.3-27.2 114.2zm44.4 26.9c-34.1-34.1-34.1-89.6 0-123.7l55.1-55.1 123.8 123.6-55.1 55.1c-34.2 34.2-89.7 34.2-123.8 0.1zm-33.4-3.2c4.5 7.3 9.8 14.2 16.1 20.5s13.2 11.6 20.5 16.1l-25.2 25.2c-1.9 2-5.1 2-7.1 0l-29.5-29.5c-1.3-1.3-1.5-2.8-1.5-3.5 0-0.8 0.2-2.3 1.5-3.5z" stroke-width="5.5994"/></g></svg>`
    },

    battery: (level) => {
        let levelColor;
        if (level < 15) {
            levelColor = "#FF0000"
        } else if (level < 30) {
            levelColor = "#ff8600"
        } else {
            levelColor = "#00a400"
        }
        return `<svg width="144" height="144" viewBox="0 0 144 144" xmlns="http://www.w3.org/2000/svg"><g transform="matrix(.5443 0 0 .5443 17.059 -15.377)" stroke-width="1.8372"><g stroke-linecap="round" stroke-linejoin="round" stroke-width="1.8372"><g fill="${colors.passive}"><rect x="170.13" y="85.397" width="18.486" height="27.963" ry="1.442" stroke-width="3.2133"/><rect x="1.3597" y="58.699" width="180.21" height="81.36" ry="4.1957" stroke-width="17.114"/></g><rect x="8.7026" y="65.534" width="165.53" height="67.69" ry="3.4907" fill="${colors.bg}" stroke-width="14.96"/><rect x="12.773" y="69.895" width="${157.39 / 100 * level}" height="58.968" ry="3.0409" fill="${levelColor}" stroke-width="13.615"/></g></g></svg>`
    },

    temperature: (level, attributes) => {
        const unit = attributes.unit_of_measurement || "";
        const image = ` <g transform="matrix(1.8104 1.9461e-5 -1.9461e-5 1.8104 14.068 14.067)">
  <g id="Thermometer" clip-rule="evenodd" fill="${colors.bg}" fill-rule="evenodd">
   <path d="m36.911 47.814v-42.349c0-3.0137-2.2032-5.4658-4.9102-5.4658-2.708 0-4.9111 2.4521-4.9111 5.4658v42.349c-2.4365 1.6338-3.9268 4.3965-3.9268 7.3467 0 4.874 3.9649 8.8389 8.8379 8.8389 4.8731 0 8.8369-3.9649 8.8369-8.8389 0-2.9492-1.4902-5.7129-3.9267-7.3467zm-4.9102 14.186c-3.7705 0-6.8379-3.0684-6.8379-6.8389 0-2.4346 1.3135-4.7051 3.4268-5.9258 0.30959-0.1787 0.5-0.5088 0.5-0.8662v-42.903c0-1.9112 1.3056-3.4658 2.9111-3.4658 1.6045 0 2.9102 1.5546 2.9102 3.4658v42.903c0 0.3574 0.1904 0.6875 0.5 0.8662 2.1133 1.2207 3.4267 3.4922 3.4267 5.9258 0 3.7705-3.0674 6.8389-6.8369 6.8389z"/>
   <path fill="${colors.bgRed}" d="m33.139 51.107v-30.784h-2.5869v30.878c-1.4497 0.5769-2.4785 1.9866-2.4785 3.6409 0 2.1648 1.758 3.923 3.924 3.923 2.1648 0 3.9229-1.7582 3.9229-3.923 0-1.766-1.1765-3.2433-2.7815-3.7351z"/>
  </g>
 </g>`

        return Image.defaultSensor(level + unit, image, "")
    },

    humidity: (level, attributes) => {
        const unit = attributes.unit_of_measurement || "";
        const image = `<g transform="matrix(.33757 0 0 .33757 16.535 16.445)" fill="${colors.bgBlue}">
            <path d="m209.31 50.798c-2.452-3.337-7.147-4.055-10.485-1.602s-4.055 7.147-1.603 10.485c54.576 74.266 66.032 123.54 66.032 151.8 0 27.691-8.272 52.794-23.293 70.685-17.519 20.866-42.972 31.446-75.651 31.446-73.031 0-98.944-55.018-98.944-102.13 0-52.227 28.103-103.23 51.679-136.83 25.858-36.847 52.11-61.415 52.37-61.657 3.035-2.819 3.209-7.565 0.39-10.6-2.819-3.034-7.565-3.209-10.599-0.39-1.11 1.031-27.497 25.698-54.254 63.765-24.901 35.428-54.586 89.465-54.586 145.71 0 31.062 9.673 59.599 27.236 80.353 20.361 24.061 50.345 36.779 86.708 36.779 36.794 0 66.926-12.726 87.139-36.801 17.286-20.588 26.806-49.117 26.806-80.33-1e-3 -55.265-37.493-117.88-68.945-160.68z"/>
            <path d="m198.43 148.15-95.162 95.162c-2.929 2.929-2.929 7.678 0 10.606 1.465 1.464 3.385 2.197 5.304 2.197s3.839-0.732 5.304-2.197l95.162-95.162c2.929-2.929 2.929-7.678 0-10.606-2.931-2.929-7.679-2.929-10.608 0z"/>
            <path d="m191.96 207.9c-13.292 0-24.106 10.814-24.106 24.106s10.814 24.106 24.106 24.106 24.106-10.814 24.106-24.106-10.814-24.106-24.106-24.106zm0 33.212c-5.021 0-9.106-4.085-9.106-9.106s4.085-9.106 9.106-9.106 9.106 4.085 9.106 9.106-4.085 9.106-9.106 9.106z"/>
            <path d="m125.18 194.16c13.292 0 24.106-10.814 24.106-24.106s-10.814-24.106-24.106-24.106-24.106 10.814-24.106 24.106 10.814 24.106 24.106 24.106zm0-33.213c5.021 0 9.106 4.085 9.106 9.106s-4.085 9.106-9.106 9.106-9.106-4.085-9.106-9.106 4.084-9.106 9.106-9.106z"/>
            </g>`
        return Image.defaultSensor(level + unit, image, "")
    },

    power: (level, attributes) => {
        const image = `<g transform="matrix(.28108 0 0 .28108 38.533 38.534)" fill="#6c6500">
  <path d="m205.07 98.678c-1.194-2.728-3.891-4.49-6.869-4.49h-62.33l30.023-84.167c1.197-3.357-0.134-7.094-3.184-8.938-3.052-1.845-6.979-1.287-9.395 1.333l-118.9 128.94c-2.019 2.189-2.551 5.366-1.355 8.094 1.194 2.728 3.891 4.49 6.869 4.49h40.521c4.143 0 7.5-3.358 7.5-7.5s-3.357-7.5-7.5-7.5h-23.403l82.365-89.315-21.24 59.543c-0.818 2.297-0.432 4.849 0.974 6.842 1.405 1.993 3.73 3.178 6.169 3.178h55.772l-82.353 89.305 21.243-59.533c0.82-2.297 0.472-4.849-0.934-6.842s-3.691-3.179-6.13-3.179h-0.074c-3.525 0-6.455 2.432-7.25 5.709l-33.348 93.456c-1.198 3.357 0.133 7.094 3.183 8.938 1.205 0.729 2.547 1.083 3.878 1.083 2.039 0 4.055-0.831 5.517-2.416l118.9-128.94c2.02-2.188 2.552-5.364 1.357-8.092z"/>
 </g>`
        const unit = attributes.unit_of_measurement || "";

        return Image.defaultSensor(level, image, unit)
    },

    pressure: (level, attributes) => {
        const image = `<g transform="matrix(.2088 0 0 .2088 21.063 21.063) translate(0,-572.36)">
   <path fill="${colors.bgBlue}" d="m203.21 877.27c2.6 0 5.2-1 7.1-3l20.3-20.6c4 1.9 8.5 3 13.2 3 16.9 0 30.7-13.7 30.7-30.6 0-4.6-1.1-8.9-2.9-12.7 0 0 0.1 0 0.1-0.1l23.5-23.9v6.2c0 5.5 4.5 10 10 10s10-4.5 10-10v-30.5c0-5.5-4.4-10-10-10h-30.7c-5.5 0-10 4.5-10 10s4.5 10 10 10h6.7l-23.7 24.2-0.1 0.1c-4.1-2-8.7-3.1-13.5-3.1-16.9 0-30.7 13.4-30.7 29.8 0 4.9 1.2 9.5 3.2 13.6l-20.3 20.6c-3.9 3.9-3.8 10.3 0.1 14.1 1.9 1.9 4.5 2.9 7 2.9zm40.7-60.999c5.8 0 10.7 4.5 10.7 9.8 0 6-4.7 10.6-10.7 10.6s-10.7-4.7-10.7-10.6c0-5.3 4.9-9.8 10.7-9.8z"/>
   <path fill="${colors.bg}" d="m292.21 638.57c6.4-19.3 0.5-41.1-15.8-54.2-18.1-16-46-16-64.9-0.1-16.3 13.1-22.3 35-15.9 54.3-95.2 21.8-166.4 106.8-166.4 208.1 0 117.8 96.3 213.6 214.7 213.6s214.8-95.8 214.8-213.6c0-101.3-71.3-186.3-166.5-208.1zm-68.1-38.8c0.1-0.1 0.2-0.1 0.2-0.2 11.5-9.7 28.3-9.8 39-0.2 0.1 0.1 0.3 0.2 0.4 0.4 10.5 8.4 13.8 23 8.4 35.1-9.2-1.2-18.7-1.8-28.2-1.8s-19 0.6-28.2 1.8c-5.5-12.1-2.2-26.701 8.4-35.1zm19.8 440.5c-78.3 0-146-46.2-176.9-112.7h353.7c-30.8 66.5-98.5 112.7-176.8 112.7zm-86.4-294.9c50.1-41.3 122.8-41.3 172.9 0 47.7 39.3 60.4 106.7 31.1 162.2h-235.2c-29.2-55.499-16.6-122.9 31.2-162.2zm270.5 162.3h-44.3c12.1-27.4 16.2-57.8 11.3-87.3-5.8-35.5-24.3-67.6-51.9-90.4-57.5-47.3-140.8-47.3-198.3 0-27.6 22.8-46.1 54.9-51.9 90.4-4.9 29.5-0.8 59.9 11.3 87.3h-45.2c-6.4-19.2-9.9-39.6-9.9-60.9 0.1-106.8 87.4-193.7 194.8-193.7s194.8 86.8 194.8 193.6c0 21.3-3.5 41.8-9.9 61h-0.8z"/>
 </g>`
        const unit = attributes.unit_of_measurement || "";

        return Image.defaultSensor(level, image, unit)
    },

    defaultSensor: (line1, image = "", line2 = "", line3 = "") => {
        const textPositionOffset = line2 ? -14 : 0;

        return `<svg width="144" height="144" xmlns="http://www.w3.org/2000/svg">
                    ${image}
                    <g id="text-lines" fill="#FFF" font-family="sans-serif" font-size="28px" text-anchor="middle" alignment-baseline="central">
                        <text x="75" y="${50 + textPositionOffset}" style="stroke:#000000;stroke-width:1.5px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;">${line1}</text>
                        <text x="75" y="${82 + textPositionOffset}" style="stroke:#000000;stroke-width:1.5px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;">${line2}</text>
                        <text x="75" y="${114 + textPositionOffset}" style="stroke:#000000;stroke-width:1.5px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;">${line3}</text>
                    </g>
                </svg>`
    },

    weather: (state) => {

        let weatherIcon;
        // Icons: SVG 24x24
        switch (state) {
            case 'cloudy':
                weatherIcon = '<path d="M6,19A5,5 0 0,1 1,14A5,5 0 0,1 6,9C7,6.65 9.3,5 12,5C15.43,5 18.24,7.66 18.5,11.03L19,11A4,4 0 0,1 23,15A4,4 0 0,1 19,19H6M19,13H17V12A5,5 0 0,0 12,7C9.5,7 7.45,8.82 7.06,11.19C6.73,11.07 6.37,11 6,11A3,3 0 0,0 3,14A3,3 0 0,0 6,17H19A2,2 0 0,0 21,15A2,2 0 0,0 19,13Z" />'
                break;
            case 'partlycloudy':
                weatherIcon = '<path d="M12.74,5.47C15.1,6.5 16.35,9.03 15.92,11.46C17.19,12.56 18,14.19 18,16V16.17C18.31,16.06 18.65,16 19,16A3,3 0 0,1 22,19A3,3 0 0,1 19,22H6A4,4 0 0,1 2,18A4,4 0 0,1 6,14H6.27C5,12.45 4.6,10.24 5.5,8.26C6.72,5.5 9.97,4.24 12.74,5.47M11.93,7.3C10.16,6.5 8.09,7.31 7.31,9.07C6.85,10.09 6.93,11.22 7.41,12.13C8.5,10.83 10.16,10 12,10C12.7,10 13.38,10.12 14,10.34C13.94,9.06 13.18,7.86 11.93,7.3M13.55,3.64C13,3.4 12.45,3.23 11.88,3.12L14.37,1.82L15.27,4.71C14.76,4.29 14.19,3.93 13.55,3.64M6.09,4.44C5.6,4.79 5.17,5.19 4.8,5.63L4.91,2.82L7.87,3.5C7.25,3.71 6.65,4.03 6.09,4.44M18,9.71C17.91,9.12 17.78,8.55 17.59,8L19.97,9.5L17.92,11.73C18.03,11.08 18.05,10.4 18,9.71M3.04,11.3C3.11,11.9 3.24,12.47 3.43,13L1.06,11.5L3.1,9.28C3,9.93 2.97,10.61 3.04,11.3M19,18H16V16A4,4 0 0,0 12,12A4,4 0 0,0 8,16H6A2,2 0 0,0 4,18A2,2 0 0,0 6,20H19A1,1 0 0,0 20,19A1,1 0 0,0 19,18Z" />'
                break;
            case 'snowy':
                weatherIcon = '<path d="m36.184 91.525c-0.62678-2.4176 0.80586-4.9695 3.2682-5.5963l10.163-2.731-7.4766-7.3423c-1.7908-1.7908-1.7908-4.7009 0-6.5364 1.7908-1.7908 4.7904-1.7908 6.5364 0l7.4318 7.3871 2.6414-10.073c0.62678-2.5071 3.1787-3.9398 5.5963-3.2682 2.5071 0.62678 3.9398 3.1787 3.1787 5.641l-2.5967 10.073 10.073-2.5967c2.4624-0.76109 5.0142 0.67155 5.641 3.1787 0.67155 2.4176-0.76109 4.9695-3.2682 5.5963l-10.073 2.6414 7.3871 7.4318c1.7908 1.746 1.7908 4.7456 0 6.5364s-4.7456 1.7908-6.4917 0l-7.3871-7.4766-2.731 10.163c-0.62678 2.5071-3.1787 3.895-5.5963 3.2682-2.5071-0.62677-3.895-3.1787-3.2682-5.641l2.6414-10.028-10.028 2.6414c-2.4624 0.62678-5.0142-0.76109-5.641-3.2682m-13.431-28.474a22.385 22.385 0 0 1 22.385-22.385c4.477-10.521 14.774-17.908 26.862-17.908 15.356 0 27.937 11.909 29.101 26.996l2.2385-0.13431a17.908 17.908 0 0 1 17.908 17.908 17.908 17.908 0 0 1-17.908 17.908 4.477 4.477 0 0 1-4.477-4.477 4.477 4.477 0 0 1 4.477-4.477 8.954 8.954 0 0 0 8.954-8.954 8.954 8.954 0 0 0-8.954-8.954h-8.954v-4.477a22.385 22.385 0 0 0-22.385-22.385c-11.193 0-20.37 8.1482-22.116 18.759-1.4774-0.53724-3.0891-0.85063-4.7456-0.85063a13.431 13.431 0 0 0-13.431 13.431c0 3.8055 1.567 7.208 4.0741 9.6703 1.6117 1.746 1.567 4.477-0.13431 6.1783-1.7013 1.746-4.6113 1.746-6.3126 0-4.0741-4.0741-6.5812-9.6703-6.5812-15.849m58.335 46.695c0.4477 1.746 2.1042 2.731 3.9398 2.2833l7.1184-1.9699-1.9699 7.1184c-0.4477 1.8356 0.53724 3.4921 2.2833 3.9398 1.7013 0.49247 3.4921-0.53725 3.9398-2.2833l1.8356-7.0289 5.2381 5.1933c1.2088 1.2536 3.313 1.2536 4.5665 0 1.2536-1.2536 1.2536-3.3578 0-4.5666l-5.1933-5.2381 7.0289-1.8356c1.746-0.4477 2.7757-2.2385 2.2833-3.9398-0.4477-1.746-2.1042-2.731-3.9398-2.2833l-7.1184 1.9699 1.9699-7.1184c0.4477-1.8356-0.53724-3.4921-2.2833-3.9398-1.7013-0.49247-3.4921 0.53724-3.9398 2.2833l-1.8356 7.0289-5.2381-5.1933c-1.2088-1.2536-3.313-1.2536-4.5665 0-1.2536 1.2983-1.2536 3.3578 0 4.5665l5.1933 5.2381-7.0289 1.8356c-1.746 0.4477-2.7757 2.2385-2.2833 3.9398z"/>'
                break;
            case 'clear-night':
                weatherIcon = '<path d="M17.75,4.09L15.22,6.03L16.13,9.09L13.5,7.28L10.87,9.09L11.78,6.03L9.25,4.09L12.44,4L13.5,1L14.56,4L17.75,4.09M21.25,11L19.61,12.25L20.2,14.23L18.5,13.06L16.8,14.23L17.39,12.25L15.75,11L17.81,10.95L18.5,9L19.19,10.95L21.25,11M18.97,15.95C19.8,15.87 20.69,17.05 20.16,17.8C19.84,18.25 19.5,18.67 19.08,19.07C15.17,23 8.84,23 4.94,19.07C1.03,15.17 1.03,8.83 4.94,4.93C5.34,4.53 5.76,4.17 6.21,3.85C6.96,3.32 8.14,4.21 8.06,5.04C7.79,7.9 8.75,10.87 10.95,13.06C13.14,15.26 16.1,16.22 18.97,15.95M17.33,17.97C14.5,17.81 11.7,16.64 9.53,14.5C7.36,12.31 6.2,9.5 6.04,6.68C3.23,9.82 3.34,14.64 6.35,17.66C9.37,20.67 14.19,20.78 17.33,17.97Z" />'
                break;
            default:
                weatherIcon = '<path d="M19.35,10.03C18.67,6.59 15.64,4 12,4C9.11,4 6.6,5.64 5.35,8.03C2.34,8.36 0,10.9 0,14A6,6 0 0,0 6,20H19A5,5 0 0,0 24,15C24,12.36 21.95,10.22 19.35,10.03M13,17H11V15H13V17M14.8,11.82C14.5,12.21 14.13,12.5 13.67,12.75C13.41,12.91 13.24,13.07 13.15,13.26C13.06,13.45 13,13.69 13,14H11C11,13.45 11.11,13.08 11.3,12.82C11.5,12.56 11.85,12.25 12.37,11.91C12.63,11.75 12.84,11.56 13,11.32C13.15,11.09 13.23,10.81 13.23,10.5C13.23,10.18 13.14,9.94 12.96,9.76C12.78,9.56 12.5,9.47 12.2,9.47C11.93,9.47 11.71,9.55 11.5,9.7C11.35,9.85 11.25,10.08 11.25,10.39H9.28C9.23,9.64 9.5,9 10.06,8.59C10.6,8.2 11.31,8 12.2,8C13.14,8 13.89,8.23 14.43,8.68C14.97,9.13 15.24,9.75 15.24,10.5C15.24,11 15.09,11.41 14.8,11.82Z" />'
                break;
        }

        let scaledWeatherIcon = `<g fill="${colors.bg}" transform="translate(24,6) scale(4,4)">${weatherIcon}</g>`

        return Image.defaultSensor("24°C", scaledWeatherIcon, "1023 hPa", "60%")
    }

}
